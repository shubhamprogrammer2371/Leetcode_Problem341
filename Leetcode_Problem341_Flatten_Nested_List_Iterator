/**
 * *********************************************************************
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * *********************************************************************
 *
 * // Return true if this NestedInteger holds a single integer, rather than a nested list.
 * bool NestedIntegerIsInteger(struct NestedInteger *);
 *
 * // Return the single integer that this NestedInteger holds, if it holds a single integer
 * // The result is undefined if this NestedInteger holds a nested list
 * int NestedIntegerGetInteger(struct NestedInteger *);
 *
 * // Return the nested list that this NestedInteger holds, if it holds a nested list
 * // The result is undefined if this NestedInteger holds a single integer
 * struct NestedInteger **NestedIntegerGetList(struct NestedInteger *);
 *
 * // Return the nested list's size that this NestedInteger holds, if it holds a nested list
 * // The result is undefined if this NestedInteger holds a single integer
 * int NestedIntegerGetListSize(struct NestedInteger *);
 * };
 */
struct NestedIterator {
    int* vals;
    int size;
    int curr;
};

void dfs(struct NestedIterator* iter, struct NestedInteger** nestedList, int nestedListSize) {
    for (int i = 0; i < nestedListSize; i++) 
    {
        if (NestedIntegerIsInteger(nestedList[i]))
            (iter->vals)[(iter->size)++] = NestedIntegerGetInteger(nestedList[i]);
        else 
            dfs(iter, NestedIntegerGetList(nestedList[i]), NestedIntegerGetListSize(nestedList[i]));
    }
}

struct NestedIterator* nestedIterCreate(struct NestedInteger** nestedList, int nestedListSize) {
    struct NestedIterator* result = (struct NestedIterator*)calloc(1, sizeof(struct NestedIterator));
    result->vals = (int*)calloc(10973, sizeof(int));
    result->size = 0;
    result->curr = 0;
    dfs(result, nestedList, nestedListSize);
    return result;
}
bool nestedIterHasNext(struct NestedIterator* iter) {
    return iter->curr != iter->size;
}
int nestedIterNext(struct NestedIterator* iter) {
    return (iter->vals)[(iter->curr)++];
}

/** Deallocates memory previously allocated for the iterator */
void nestedIterFree(struct NestedIterator* iter) {
    free(iter->vals);
    free(iter);
}

/**
 * Your NestedIterator will be called like this:
 * struct NestedIterator *i = nestedIterCreate(nestedList, nestedListSize);
 * while (nestedIterHasNext(i)) printf("%d\n", nestedIterNext(i));
 * nestedIterFree(i);
 */
